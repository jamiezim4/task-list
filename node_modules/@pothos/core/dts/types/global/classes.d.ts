import type { SchemaBuilder as Builder } from '../../builder';
import type { FieldBuilder as InternalFieldBuilder } from '../../fieldUtils/builder';
import type { InputFieldBuilder as InternalInputFieldBuilder } from '../../fieldUtils/input';
import type { RootFieldBuilder as InternalRootFieldBuilder } from '../../fieldUtils/root';
import type { BaseTypeRef as InternalBaseRef } from '../../refs/base';
import type { EnumRef as InternalEnumRef } from '../../refs/enum';
import type { InputListRef as InternalInputListRef } from '../../refs/input-list';
import type { InputObjectRef as InternalInputObjectRef } from '../../refs/input-object';
import type { InterfaceRef as InternalInterfaceRef } from '../../refs/interface';
import type { ListRef as InternalListRef } from '../../refs/list';
import type { ObjectRef as InternalObjectRef } from '../../refs/object';
import type { ScalarRef as InternalScalarRef } from '../../refs/scalar';
import type { UnionRef as InternalUnionRef } from '../../refs/union';
import type { FieldKind } from '../builder-options';
import type { SchemaTypes } from '../schema-types';
declare global {
    export namespace PothosSchemaTypes {
        interface SchemaBuilder<Types extends SchemaTypes> extends Builder<Types> {
        }
        interface RootFieldBuilder<Types extends SchemaTypes, ParentShape, Kind extends FieldKind = FieldKind> extends InternalRootFieldBuilder<Types, ParentShape, Kind> {
        }
        interface FieldBuilder<Types extends SchemaTypes, ParentShape, Kind extends FieldKind = FieldKind> extends InternalFieldBuilder<Types, ParentShape, Kind>, RootFieldBuilder<Types, ParentShape, Kind> {
        }
        interface QueryFieldBuilder<Types extends SchemaTypes, ParentShape> extends RootFieldBuilder<Types, ParentShape, 'Query'> {
        }
        interface MutationFieldBuilder<Types extends SchemaTypes, ParentShape> extends RootFieldBuilder<Types, ParentShape, 'Mutation'> {
        }
        interface SubscriptionFieldBuilder<Types extends SchemaTypes, ParentShape> extends RootFieldBuilder<Types, ParentShape, 'Subscription'> {
        }
        interface ObjectFieldBuilder<Types extends SchemaTypes, ParentShape> extends FieldBuilder<Types, ParentShape, 'Object'> {
        }
        interface InterfaceFieldBuilder<Types extends SchemaTypes, ParentShape> extends FieldBuilder<Types, ParentShape, 'Interface'> {
        }
        interface InputFieldBuilder<Types extends SchemaTypes, Kind extends 'Arg' | 'InputObject'> extends InternalInputFieldBuilder<Types, Kind> {
        }
        interface BaseTypeRef<Types extends SchemaTypes, T> extends InternalBaseRef<Types, T> {
        }
        interface EnumRef<Types extends SchemaTypes, T, U = T> extends InternalEnumRef<Types, T, U> {
        }
        interface InputObjectRef<Types extends SchemaTypes, T> extends InternalInputObjectRef<Types, T> {
        }
        interface InputListRef<Types extends SchemaTypes, T> extends InternalInputListRef<Types, T> {
        }
        interface InterfaceRef<Types extends SchemaTypes, T, P = T> extends InternalInterfaceRef<Types, T, P> {
        }
        interface ObjectRef<Types extends SchemaTypes, T, P = T> extends InternalObjectRef<Types, T, P> {
        }
        interface ScalarRef<Types extends SchemaTypes, T, U, P = T> extends InternalScalarRef<Types, T, U, P> {
        }
        interface UnionRef<Types extends SchemaTypes, T, P = T> extends InternalUnionRef<Types, T, P> {
        }
        interface ListRef<Types extends SchemaTypes, T, P = T> extends InternalListRef<Types, T, P> {
        }
    }
}
//# sourceMappingURL=classes.d.ts.map